#!/usr/bin/perl
use strict;
use Tkx;
use DBI;
use Cwd;
use File::Basename;
use File::Copy;
Tkx::package_require('widget::statusbar');
Tkx::package_require('img::png');
Tkx::package_require('img::ico');
Tkx::lappend('::auto_path', 'lib');
Tkx::package_require('tkdnd');

my %para;
my %wdg;

#initial parameters
$para{width} = 400;
$para{height} = 300;
$para{unit} = 'Mb';
$para{title} = 'Sliding Window Plot';
$para{xlabel} = "Chromosome Position ($para{unit})";
$para{ylabel} = 'Number of SSR';
$para{win_size} = 5;
$para{step_size} = 1;
$para{a_type} = 'all';
$para{yval} = 'Number of SSR';
$para{legend} = [];
$para{db} = "Import database file generated by MSDB.";
$para{color} = "red";

my $mw = Tkx::widget->new('.');
$mw->g_wm_title("Generate Sliding Window Plot");
$mw->g_grid_columnconfigure(0, -weight => 1);
$mw->g_grid_rowconfigure(0, -weight => 1);
$mw->g_wm_protocol('WM_DELETE_WINDOW', sub{on_exit()});

	#different os
	$wdg{'os'}=Tkx::tk_windowingsystem();
	if($wdg{'os'} eq "win32"){
		Tkx::wm_iconbitmap($mw, -default => "MSDB.ico");
	} elsif($wdg{'os'} eq "x11"){
		Tkx::wm_iconphoto($mw, "-default", Tkx::image_create_photo(-file => 'MSDB.ico'));
	}

my $fm = $mw->new_ttk__frame(-padding => 5);
$fm->g_grid(-sticky => "wnes");
$fm->g_grid_columnconfigure(1, -weight => 1);
$fm->g_grid_rowconfigure(1, -weight => 1);

#drag file
Tkx::tkdnd__drop___target_register($fm,'*');
Tkx::bind($fm, '<<Drop:DND_Files>>', [sub{import_db_file(shift)}, Tkx::Ev('%D')]);

my $df = $fm->new_ttk__frame;
$df->g_grid(
	-sticky => "we",
	-columnspan => 2,
	-pady => '0 10',
);
$df->g_grid_columnconfigure(1, -weight => 1);
$df->new_ttk__button(
	-text => "Import Database File",
	-command => sub{import_db_file()},
)->g_grid(
	-column => 0,
	-row => 0,
);
$df->new_ttk__entry(
	-textvariable => \$para{db},
	-state => "readonly",
	-width => 0,
)->g_grid(
	-column => 1,
	-row => 0,
	-sticky => "we",
	-padx => '10 0',
);

my $gf = $fm->new_ttk__frame;
$gf->g_grid(
	-sticky => "wnes",
	-row => 1,
	-column => 0,
	-padx => "0 10",
);
$gf->g_grid_rowconfigure(1, -weight => 1);

my $gh = $gf->new_ttk__labelframe(
	-text => "General",
	-padding => 5,
);
$gh->g_grid(-sticky => 'wnes');
$gh->new_ttk__label(
	-text => 'Width:',
)->g_grid(
	-column => 0,
	-row => 0,
	-sticky => 'e',
);
$gh->new_ttk__entry(
	-textvariable => \$para{width},
	-width => 8,
)->g_grid(
	-column => 1,
	-row => 0,
	-sticky => 'w',
);
$gh->new_ttk__label(
	-text => "Height:",
)->g_grid(
	-column => 2,
	-row => 0,
	-sticky => 'e',
	-padx => '5 0',
);
$gh->new_ttk__entry(
	-textvariable => \$para{height},
	-width => 8,
)->g_grid(
	-column => 3,
	-row => 0,
	-sticky => 'w',
);
$gh->new_ttk__label(
	-text => 'Title:',
)->g_grid(
	-column => 0,
	-row => 1,
	-sticky => 'e',
	-pady => 5,
);
$gh->new_ttk__entry(
	-textvariable => \$para{title},
	-width => 0,
)->g_grid(
	-column => 1,
	-row => 1,
	-sticky => "wnes",
	-columnspan => 3,
	-pady => 5,
);
$gh->new_ttk__label(
	-text => 'XLabel:',
)->g_grid(
	-column => 0,
	-row => 2,
	-sticky => 'e',
);
$gh->new_ttk__entry(
	-textvariable => \$para{xlabel},
	-width => 0,
)->g_grid(
	-column => 1,
	-row => 2,
	-sticky => "wnes",
	-columnspan => 3,
);
$gh->new_ttk__label(
	-text => 'YLabel:',
)->g_grid(
	-column => 0,
	-row => 3,
	-sticky => 'e',
	-pady => 5,
);
$gh->new_ttk__entry(
	-textvariable => \$para{ylabel},
	-width => 0,
)->g_grid(
	-column => 1,
	-row => 3,
	-sticky => "wnes",
	-columnspan => 3,
	-pady => 5,
);
$gh->new_ttk__label(
	-text => "Color:",
)->g_grid(
	-column => 0,
	-row => 4,
	-sticky => 'e',
);
$gh->new_ttk__combobox(
	-textvariable => \$para{color},
	-values => [qw/red blue green black/],
)->g_grid(
	-column => 1,
	-row => 4,
	-sticky => 'wnes',
	-columnspan => 3,
);


#graph type

my $gt = $gf->new_ttk__labelframe(
	-text => 'Graph Data',
	-padding => 5,
);
$gt->g_grid(
	-sticky => "wnes",
	-pady => 10,
);
$gt->g_grid_columnconfigure(1, -weight => 1);
$gt->g_grid_rowconfigure(1, -weight => 1);

#public parameter

$gt->new_ttk__label(
	-text => 'Seq File:',
)->g_grid(
	-column => 0,
	-row => 0,
	-sticky => 'e',
);
$wdg{source} = $gt->new_ttk__combobox(
	-textvariable => \$para{file},
	-width => 0,
	-state => 'readonly',
);
$wdg{source}->g_grid(
	-column => 1,
	-row => 0,
	-sticky => 'we',
	-columnspan => 2,
);
$wdg{source}->g_bind("<<ComboboxSelected>>", sub{config_data_set($para{file})});
my $dtf = $gt->new_ttk__frame();
$dtf->g_grid(
	-column => 0,
	-row => 1,
	-columnspan => 2,
	-sticky => 'wnes',
	-pady => 5,
);
$dtf->g_grid_columnconfigure(0, -weight => 1);
$dtf->g_grid_rowconfigure(1, -weight => 1);
$dtf->new_ttk__label(
	-text => 'Data Set:',
)->g_grid(
	-sticky => 'we',
	-column => 0,
	-row => 0,
	-columnspan => 2,
);
$wdg{tree} = $dtf->new_ttk__treeview(
	-columns => 'type',
	-height => 4,
	-selectmode => "browse",
);
$wdg{tree}->g_grid(
	-sticky => "wnes",
	-column => 0,
	-row => 1,
);
my $scrolly = $dtf->new_ttk__scrollbar(
	-orient => 'vertical',
	-command => [$wdg{tree}, 'yview'],
);
$scrolly->g_grid(
	-column => 1,
	-row => 1,
	-sticky => "ns",
);
$wdg{tree}->configure(-yscrollcommand => [$scrolly, 'set']);
$wdg{tree}->column('#0', -width => 20);
my $tree_width = $wdg{tree}->g_winfo_reqwidth - $scrolly->g_winfo_reqwidth -20;
$wdg{tree}->column('type', -width => $tree_width);
$wdg{tree}->heading('type', -text => 'Microsatellite Type');
$wdg{tree}->g_bind("<<TreeviewSelect>>", sub{get_data_set()});

#slide window plot frame

my $wsss = $gt->new_ttk__frame;
$wsss->g_grid(
	-column => 0,
	-row => 2,
	-sticky => 'we',
	-columnspan => 2,
);
$wsss->g_grid_columnconfigure(1, -weight => 1);

$wsss->new_ttk__label(
	-text => 'Window Size:',
)->g_grid(
	-column => 0,
	-row => 0,
	-sticky => 'e',
);
$wsss->new_ttk__entry(
	-textvariable => \$para{win_size},
	-width => 0,
)->g_grid(
	-column => 1,
	-row => 0,
	-sticky => "we",
);
my $combo_unit = $wsss->new_ttk__combobox(
	-values => [qw(Mb Kb Bp)],
	-textvariable => \$para{unit},
	-state => 'readonly',
	-width => 3,
);
$combo_unit->g_grid(
	-column => 2,
	-row => 0,
	-sticky => 'w',
);
$combo_unit->g_bind("<<ComboboxSelected>>",sub{change_y_label()});

$wsss->new_ttk__label(
	-text => 'Step Size:',
)->g_grid(
	-column => 0,
	-row => 1,
	-sticky => 'e',
	-pady => 5,
);
$wsss->new_ttk__entry(
	-textvariable => \$para{step_size},
	-width => 0,
)->g_grid(
	-column => 1,
	-row => 1,
	-sticky => "we",
	-pady => 5,
);
my $combo_unit1 = $wsss->new_ttk__combobox(
	-values => [qw(Mb Kb Bp)],
	-textvariable => \$para{unit},
	-state => 'readonly',
	-width => 3,
);
$combo_unit1->g_grid(
	-column => 2,
	-row => 1,
	-sticky => 'w',
	-pady => 5,
);
$combo_unit1->g_bind("<<ComboboxSelected>>",sub{change_y_label()});


$wsss->new_ttk__label(
	-text => 'Y Axis value:',
)->g_grid(
	-column => 0,
	-row => 2,
	-sticky => 'e',
);
$wdg{yval} = $wsss->new_ttk__combobox(
	-values => ['Number of SSR','Density of SSR','Frequency of SSR'],
	-textvariable => \$para{yval},
	-state => 'readonly',
	-width => 0,
);
$wdg{yval}->g_grid(
	-column => 1,
	-row => 2,
	-sticky => 'we',
	-columnspan => 2,
);
$wdg{yval}->g_bind("<<ComboboxSelected>>",sub{change_y_label()});
$gt->new_ttk__button(
	-text => 'Generate Graph',
	-command => sub{slide_win_plot()},
)->g_grid(
	-column => 0,
	-columnspan => 2,
	-row => 4,
	-sticky => 'we',
	-pady => 5,
);
$gt->new_ttk__button(
	-text => 'Export CSV File',
	-command => sub{export_to_csv()},
)->g_grid(
	-column => 0,
	-columnspan => 2,
	-row => 5,
	-sticky => 'we',
);

###############

my $vf = $fm->new_ttk__frame;
$vf->g_grid(
	-sticky => "wnes",
	-row => 1,
	-column => 1,
);
$vf->g_grid_columnconfigure(0, -weight => 1);
$vf->g_grid_rowconfigure(1, -weight => 1);
$vf->new_ttk__label(
	-text => "Graph Preview:",
)->g_grid(
	-sticky =>"w",
	-column => 0,
	-row => 0,
);
$vf->new_ttk__button(
	-text => "Save Image",
	-command => sub{save_graph()},
)->g_grid(
	-column => 1,
	-row => 0,
	-sticky => "e",
);
$wdg{text} = $vf->new_tk__text(
	-state => 'disabled',
	-padx => 10,
	-pady => 10,
);
$wdg{text}->g_grid(
	-sticky => "wnes",
	-column => 0,
	-columnspan => 2,
	-row => 1,
);
my $scrolly = $vf->new_ttk__scrollbar(
	-orient => 'vertical',
	-command => [$wdg{text}, 'yview'],
);
$scrolly->g_grid(
	-column => 2,
	-row => 1,
	-sticky => "ns",
);
$wdg{text}->configure(-yscrollcommand => [$scrolly, 'set']);
my $scrollx = $vf->new_ttk__scrollbar(
	-orient => 'horizontal',
	-command => [$wdg{text}, 'xview'],
);
$scrollx->g_grid(
	-column => 0,
	-columnspan => 2,
	-row => 2,
	-sticky => "we",
);
$wdg{text}->configure(-xscrollcommand => [$scrollx, 'set']);


$mw->new_widget__statusbar()->g_grid(-sticky => "we");


Tkx::MainLoop;

#creat gui function
sub config_gui_paras{
	my $sql = "SELECT filename FROM file";
	my $file = $para{dbh}->selectcol_arrayref($sql);
	$wdg{source}->configure(-values => $file);
	$wdg{source}->current(0);
    config_data_set($para{file});
}
sub config_data_set{
	my $file = shift;
	$wdg{tree}->delete($wdg{tree}->children(""));
	$wdg{tree}->insert("", "end", -id => "at", -values => ['All Types']);
	foreach my $type ( qw/p ip cd icd cx icx/ ){
		insert_to_tree($type, $file);
	}
}
sub insert_to_tree{
	my ($type, $file) = @_;
	my $sql = "SELECT * FROM ssr WHERE type='$type' AND source='$file' LIMIT 0,1";
	my $sth = $para{dbh}->prepare($sql);
	$sth->execute;
	return unless $sth->fetchrow_array;
	if($type eq 'p'){
		$wdg{tree}->insert("", "end", -id => "ap", -values => ['Pure SSR']) unless $wdg{tree}->exists("ap");
		$wdg{tree}->insert("ap", "end", -id => "p", -values => ['pure ssr']);
	}elsif($type eq 'ip'){
		$wdg{tree}->insert("", "end", -id => "ap", -values => ['Pure SSR']) unless $wdg{tree}->exists("ap");
		$wdg{tree}->insert("ap", "end", -id => "ip", -values => ['interrupted pure ssr']);
	}elsif($type eq 'cd'){
		$wdg{tree}->insert("", "end", -id => "acd", -values => ['Compound SSR']) unless $wdg{tree}->exists("acd");
		$wdg{tree}->insert("acd", "end", -id => "cd", -values => ['compound ssr']);
	}elsif($type eq 'icd'){
		$wdg{tree}->insert("", "end", -id => "acd", -values => ['Compound SSR']) unless $wdg{tree}->exists("acd");
		$wdg{tree}->insert("acd", "end", -id => "icd", -values => ['interrupted compound ssr']);
	}elsif($type eq 'cx'){
		$wdg{tree}->insert("", "end", -id => "acx", -values => ['Complex SSR']) unless $wdg{tree}->exists("acx");
		$wdg{tree}->insert("acx", "end", -id => "cx", -values => ['complex ssr']);
	}elsif($type eq 'icx'){
		$wdg{tree}->insert("", "end", -id => "acx", -values => ['Complex SSR']) unless $wdg{tree}->exists("acx");
		$wdg{tree}->insert("acx", "end", -id => "icx", -values => ['interrupted complex ssr']);
	}
}
sub change_y_label{
	if($para{yval} eq 'Number of SSR'){
		$para{ylabel} = $para{yval};
	}elsif($para{yval} eq 'Density of SSR'){
		$para{ylabel} = $para{yval} . " (bp/$para{unit})";
	}else{
		$para{ylabel} = $para{yval} . " (Loci/$para{unit})";
	}
}
#functions

sub import_db_file{
	my ($db_file) = Tkx::SplitList(shift);
	if(!$db_file){
		$db_file = Tkx::tk___getOpenFile(
			-filetypes => [['DataBase File', '.db']],
			-initialdir => $para{filedir},
		);
	}
	return unless $db_file;
	if($db_file !~ /.*\.db$/){
		alert_info("File is not a SQLite database file.");
		return;
	}
	(undef, $para{filedir}) = fileparse($db_file);
	$para{db} = $db_file;
	$para{dbh} = DBI->connect("dbi:SQLite:dbname=$db_file", '', '');
	alert_info($DBI::errstr) if !$para{dbh};
	config_gui_paras();
}
sub check_para{
	alert_info("Please import database file!") if $para{db} !~ /\.db$/;
	alert_info("Please select ssr type!") unless $para{c_type} || $para{a_type} || $para{p_type};
	alert_info("Please input sliding window size!") unless $para{win_size};
	alert_info("Please input sliding step size!") unless $para{step_size};
}
sub alert_info{
	my $msg = shift;
    Tkx::tk___messageBox(
		-type => "ok", 
		-message => $msg, 
		-icon => "error", 
		-title => "ERROR",
	);
	Tkx::MainLoop;
}
sub calculate_density_data{
	my $sql = shift;
	my %xy;
	my $start = 1;
	my $end = unit_convert($para{win_size});
	my $step = unit_convert($para{step_size});
	my $total = $para{dbh}->selectrow_array("SELECT size FROM file WHERE filename='$para{file}'");
	my $sth = $para{dbh}->prepare($sql);
	$sth->execute();
	while(my ($s, $e, $l) = $sth->fetchrow_array){
		if($s >= $start && $e <= $end ){
			$xy{$end} += $l;
		}else{
			do{
				$start += $step;
				$end += $step;
				$xy{$end} = 0;
			}while($s < $start || $e > $end);
			$xy{$end} += $l;
		}
	}
	
	my @x;
	my @y;

	foreach(sort {$a <=> $b} keys %xy){
		push @x, r_unit_convert($_);
		push @y, $xy{$_};
	}
	
	@y = map { $_/$para{win_size} } @y;
	
	$para{xaxis} = \@x;
	return \@y;
}
sub calculate_frequency_data{
	my $sql = shift;
	my %xy;
	my $start = 1;
	my $end = unit_convert($para{win_size});
	my $step = unit_convert($para{step_size});
	my $total = $para{dbh}->selectrow_array("SELECT size FROM file WHERE filename='$para{file}'");
	my $sth = $para{dbh}->prepare($sql);
	$sth->execute();
	while(my ($s, $e) = $sth->fetchrow_array){
		if($s >= $start && $e <= $end ){
			$xy{$end}++;
		}else{
			do{
				$start += $step;
				$end += $step;
				$xy{$end} = 0;
			}while($s < $start || $e > $end);
			$xy{$end}++;
		}
	}
	
	my @x;
	my @y;
	
	foreach(sort {$a <=> $b} keys %xy){
		push @x, r_unit_convert($_);
		push @y, $xy{$_};
	}
	
	@y = map { $_/$para{win_size} } @y;
		
	$para{xaxis} = \@x;
	return \@y;
}
sub calculate_num_data{
	my $sql = shift;
	my %xy;
	my $start = 1;
	my $end = unit_convert($para{win_size});
	my $step = unit_convert($para{step_size});
	my $total = $para{dbh}->selectrow_array("SELECT size FROM file WHERE filename='$para{file}'");
	my $sth = $para{dbh}->prepare($sql);
	$sth->execute();
	while(my ($s, $e) = $sth->fetchrow_array){
		if($s >= $start && $e <= $end ){
			$xy{$end}++;
		}else{
			do{
				$start += $step;
				$end += $step;
				$xy{$end} = 0;
			}while($s < $start || $e > $end);
			$xy{$end}++;
		}
	}
	
	my @x;
	my @y;
	
	foreach(sort {$a <=> $b} keys %xy){
		push @x, r_unit_convert($_);
		push @y, $xy{$_};
	}
	
	$para{xaxis} = \@x;
	return \@y;
}
sub calculate_data{
	my $type = shift;
	my $sql = "SELECT start,end FROM ssr WHERE source='$para{file}'";
	if($para{yval} eq 'Density of SSR'){
		$sql = "SELECT start,end,length FROM ssr WHERE source='$para{file}'";
	}
	
	if($type eq 'at'){
		push @{$para{legend}}, "Total SSRs";
	}elsif($type eq 'ap'){
		$sql .= " AND (type='p' OR type='ip')";
		push @{$para{legend}}, "Total Pure SSRs";
	}elsif($type eq 'acd'){
		$sql .= " AND (type='cd' OR type='icd')";
		push @{$para{legend}}, "Total Compound SSRs";
	}elsif($type eq 'acx'){
		$sql .= " AND (type='cx' OR type='icx')";
		push @{$para{legend}}, "Total Complex SSRs";
	}else{
		$sql .= " AND type='$type'";
		if($type eq 'p'){
			push @{$para{legend}}, "Pure SSRs";
		}elsif($type eq 'ip'){
			push @{$para{legend}}, 'Interrupted Pure SSRs';
		}elsif($type eq 'cd'){
			push @{$para{legend}}, 'Compound SSRs';
		}elsif($type eq 'icd'){
			push @{$para{legend}}, 'Interrupted Compound SSRs';
		}elsif($type eq 'cx'){
			push @{$para{legend}}, 'Complex SSRs';
		}elsif($type eq 'icx'){
			push @{$para{legend}}, 'Interrupted Complex SSRs';
		}
	}
	if($para{yval} eq 'Density of SSR'){
		return calculate_density_data($sql);
	} elsif($para{yval} eq 'Frequency of SSR'){
		return calculate_frequency_data($sql);
	} else {
		return calculate_num_data($sql);
	}
}
sub slide_win_plot{
	check_para();
	my @yaxis;
	alert_info("Please select a microsatellite type from data set!") unless defined $para{data_set};
	$para{legend} = [];
	foreach ( @{$para{data_set}} ){
		push @yaxis, calculate_data($_);
	}
	$para{data} = \@yaxis;
	create_slide_win_img();
}
sub create_slide_win_img{
	return unless defined $para{data};
	unlink "swp_temp.png";
	my $data = $para{data};
	my $x = join(',', @{$para{xaxis}});
	my $y = join(',', @{shift @$data});
	my $now_dir = cwd;
	
	open RSCRIPT, ">", "rscript.R";
	
	my $cmd = <<"CODE";
		setwd("$now_dir")
		png("swp_temp.png", width=$para{width}, height=$para{height})
		y <- c($y)
		x <- c($x)
		plot(x, y, type="l", xlab="$para{xlabel}", ylab="$para{ylabel}", main="$para{title}", col="$para{color}")
		dev.off()
CODE
	
	print RSCRIPT $cmd;
	close RSCRIPT;
	my $res = system("R <rscript.R --vanilla");
	if($res != 0){
		alert_info("SWP can not call R.\nPlease ensure that R package has been installed and can be called in command line!");
		unlink "rscript.R";
		return;
	}
	unlink "rscript.R";
	insert_img_to_text();
}
sub export_to_csv{
	check_para();
	alert_info("Please select a microsatellite type from data set!") unless defined $para{data_set};
	my @yaxis;
	foreach ( @{$para{data_set}} ){
		push @yaxis, calculate_data($_);
	}
	$para{data} = \@yaxis;
	my $csv = Tkx::tk___getSaveFile(
		-defaultextension => '.csv',
		-initialfile => 'table',
		-filetypes => [["CSV FILE", '.csv']],
		-initialdir => $para{lastdir},
	);
	return unless $csv;
	open CSV, ">", $csv;
	print CSV "#position - chromosome position ($para{unit})\n";
	my $column_name;
	if($para{yval} eq 'Number of SSR'){
		print CSV "#counts - number of SSRs\n";
		$column_name = "counts";
	}elsif($para{yval} eq 'Density of SSR'){
		print CSV "#dendity - density of SSRs (bp/$para{unit})\n";
		$column_name = "density";
	}else{
		print CSV "#frequency - frequency of SSRs (Loci/$para{unit})\n";
		$column_name = "frequency";
	}
	print CSV qq`"position","$column_name"\n`;
	my $data = shift @{$para{data}};
	foreach (@$data){
		print CSV shift @{$para{xaxis}};
		print CSV ",";
		print CSV $_,"\n";
	}
	close CSV;
}
sub unit_convert{
	my $num = shift;
	if($para{unit} eq 'Mb'){
		$num *= 1000000;
	}elsif($para{unit} eq 'Kb'){
		$num *= 1000;
	}
	return $num;
}
sub r_unit_convert{
	my $num = shift;
	if($para{unit} eq 'Mb'){
		$num /= 1000000;
	}elsif($para{unit} eq 'Kb'){
		$num /= 1000;
	}
	return $num;
}
sub insert_img_to_text{
	$wdg{text}->configure(-state => 'normal');
	$wdg{text}->delete('1.0','end');
	$wdg{text}->image_create('end', -image => Tkx::image_create_photo(-file => "swp_temp.png"));
	$wdg{text}->configure(-state => 'disabled');
}
sub save_graph{
	return unless $para{data};
	my $img = Tkx::tk___getSaveFile(
		-defaultextension => '.png',
		-initialfile => 'graph',
		-filetypes => [["IMAGE FILE", '.png']],
		-initialdir => $para{lastdir},
	);
	return unless $img;
	(undef, $para{lastdir}) = fileparse($img, qr{\..*});
	copy("swp_temp.png", $img);
}
sub get_data_set{
	my @dataset = Tkx::SplitList($wdg{tree}->selection());
	$para{data_set} = \@dataset;
}
sub on_exit{
	$para{dbh}->disconnect if defined $para{dbh};
	unlink 'swp_temp.png' if -e 'swp_temp.png';
	$mw->g_destroy;
}